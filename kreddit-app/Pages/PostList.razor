@inherits LayoutComponentBase

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th colspan="3">Votes</th>
        </tr>
        @foreach (var post in posts)
        {
            <tr>
                <td><a href="/post/@post.Id">@post.Title</a></td>
                <td>@post.Content</td>
                <td>@(post.Upvotes - post.Downvotes)</td>
                <td><button @onclick="() => Upvote(post.Id)">Upvote</button></td>
                <td><button @onclick="() => Downvote(post.Id)">Downvote</button></td>
            </tr>
        }
    </table>
}

@code {
    private Post[]? posts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await apiService.GetPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl under indlæsning af posts: {ex.Message}");
            // Her kan du tilføje UI logik for at vise en fejlbesked
        }
    }

    private async void Upvote(int id)
    {
        try
        {
            var updatedPost = await apiService.UpvotePost(id);
            UpdatePostInList(updatedPost);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl under upvoting post: {ex.Message}");
            // Her kan du tilføje UI logik for at vise en fejlbesked
        }
    }

    private async void Downvote(int id)
    {
        try
        {
            var updatedPost = await apiService.DownvotePost(id);
            UpdatePostInList(updatedPost);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl under downvoting post: {ex.Message}");
            // Her kan du tilføje UI logik for at vise en fejlbesked
        }
    }

    private void UpdatePostInList(Post updatedPost)
    {
        var post = posts?.FirstOrDefault(p => p.Id == updatedPost.Id);
        if (post != null)
        {
            post.Upvotes = updatedPost.Upvotes;
            post.Downvotes = updatedPost.Downvotes;
            StateHasChanged();
        }
    }
}
